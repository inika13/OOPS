OOPS:
Object-Oriented Programming (OOP) is a programming paradigm that uses objects and classes to structure software.
It helps make programs modular, reusable, maintainable, and scalable.

Class → Blueprint/template for creating objects.

Object → Instance of a class that holds actual data and behavior.

1) INHERITANCE :
      1)Inheritance is an OOP concept where one class (child/derived class) inherits the members (fields, properties, methods) of another class (parent/base class).
      2)It helps in code reusability, method overriding, and hierarchical classification.

TYPES OF INHERITANCE:
 1) Single Inheritance:
    A derived class inherits from a single base class.(One Parent → One Child)

2) Multilevel Inheritance:
    A derived class is created from another derived class — forming a chain of inheritance.
    public class Animal
{
    public void Eat() => Console.WriteLine("Eating...");
}

public class Dog : Animal
{
    public void Bark() => Console.WriteLine("Barking...");
}

public class Puppy : Dog
{
    public void Weep() => Console.WriteLine("Weeping...");
}

class Program
{
    static void Main()
    {
        Puppy p = new Puppy();
        p.Eat();   // From Animal
        p.Bark();  // From Dog
        p.Weep();  // From Puppy
    }
}

3) Hierarchical Inheritance:
          Multiple derived classes inherit from a single base class.(One Parent → Many Children) 
  public class Animal
{
    public void Eat() => Console.WriteLine("Eating...");
}

public class Dog : Animal
{
    public void Bark() => Console.WriteLine("Barking...");
}

public class Cat : Animal
{
    public void Meow() => Console.WriteLine("Meowing...");
}

class Program
{
    static void Main()
    {
        Dog d = new Dog();
        d.Eat();
        d.Bark();

        Cat c = new Cat();
        c.Eat();
        c.Meow();
    }
}

4) Multiple Inheritance:
   Multiple inheritance is not supported directly to avoid ambiguity, but can be achieved through interfaces. Because, if 2 parent class 
   have same method, compiler doesnot know which one to call.

5) Hybrid Inheritance:
   Combination of two or more inheritance types — usually involves classes + interfaces.
   Mix of hierarchical + multiple inheritance.

  public class Animal
{
    public void Eat() => Console.WriteLine("Eating...");
}

public interface IRun
{
    void Run();
}

public interface IJump
{
    void Jump();
}

public class Dog : Animal, IRun, IJump
{
    public void Run() => Console.WriteLine("Running...");
    public void Jump() => Console.WriteLine("Jumping...");
}

class Program
{
    static void Main()
    {
        Dog d = new Dog();
        d.Eat();
        d.Run();
        d.Jump();
    }
}

example: 
public class Vehicle
{
    public void Start() => Console.WriteLine("Vehicle starting...");
}

public interface IRefuelable
{
    void Refuel();
}

public class Car : Vehicle, IRefuelable
{
    public void Refuel() => Console.WriteLine("Car refueling...");
}

public class ElectricCar : Car
{
    public void Charge() => Console.WriteLine("Electric car charging...");
}

class Program
{
    static void Main()
    {
        ElectricCar tesla = new ElectricCar();
        tesla.Start();   
        tesla.Refuel();  
        tesla.Charge(); 
    }
}

